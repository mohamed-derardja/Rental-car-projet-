import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.myapplication.R

@Composable
fun PaymentMethod() {
    var selectedOption by remember { mutableStateOf("Cash") }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF2F5FA))
    ) {
        Column(
            modifier = Modifier.fillMaxSize(),
            verticalArrangement = Arrangement.SpaceBetween
        ) {
            Column {
                PaymentHeader()
                PaymentOptions(selectedOption) { selectedOption = it }
            }
            ContinueButton()
        }
    }
}

@Composable
private fun PaymentHeader() {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 20.dp, vertical = 16.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Box(
            modifier = Modifier
                .size(48.dp)
                .clip(CircleShape)
                .background(Color.White)
                .border(1.dp, Color.LightGray, CircleShape)
                .clickable { /* Handle back navigation */ },
            contentAlignment = Alignment.Center
        ) {
            Image(
                painter = painterResource(id = R.drawable.fleche_icon_lonly),
                contentDescription = "Back",
                modifier = Modifier.size(24.dp)
            )
        }

        Row(
            modifier = Modifier.weight(1f),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "Payment method",
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(start = 42.dp))

            Image(
                painter = painterResource(id = R.drawable.sparcles),
                contentDescription = "Sparkle",
                modifier = Modifier.size(90.85.dp, 84.dp)
            )
        }
    }
}

@Composable
private fun PaymentOptions(
    selectedOption: String,
    onOptionSelected: (String) -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 20.dp)
    ) {
        // Cash option
        PaymentOption(
            title = "Cash",
            subtitle = "DA cash",
            isSelected = selectedOption == "Cash",
            onSelect = { onOptionSelected("Cash") },
            showIcon = false
        )

        Spacer(modifier = Modifier.height(16.dp))

        // Card option
        PaymentOption(
            title = "Card Edahabia",
            subtitle = "Add Card",
            isSelected = selectedOption == "Card",
            onSelect = { onOptionSelected("Card") },
            showIcon = true
        )
    }
}

@Composable
private fun PaymentOption(
    title: String,
    subtitle: String,
    isSelected: Boolean,
    onSelect: () -> Unit,
    showIcon: Boolean
) {
    Column {
        Text(
            text = title,
            fontSize = 16.sp,
            fontWeight = FontWeight.Medium,
            modifier = Modifier.padding(bottom = 8.dp)
        )

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .border(
                    width = if (isSelected) 1.5.dp else 1.dp,
                    color = if (isSelected) Color(0xFF149459) else Color.Gray,
                    shape = RoundedCornerShape(8.dp)
                )
                .background(Color.White, RoundedCornerShape(8.dp))
                .clickable { onSelect() }
                .padding(horizontal = 16.dp, vertical = 12.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                if (showIcon) {
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        Image(
                            painter = painterResource(id = R.drawable.credit_card_icon),
                            contentDescription = "Card",
                            modifier = Modifier.size(24.dp))
                        Spacer(modifier = Modifier.width(12.dp))
                        Text(subtitle, fontSize = 16.sp)
                    }
                } else {
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        Text("DA", fontSize = 16.sp)
                        Divider(
                            modifier = Modifier
                                .padding(horizontal = 12.dp)
                                .width(1.dp)
                                .height(24.dp),
                            color = Color.Black,
                            thickness = 1.dp
                        )
                        Text("cash", fontSize = 16.sp)
                    }
                }

                if (isSelected) {
                    Image(
                        painter = painterResource(id = R.drawable.button_black),
                        contentDescription = "Selected",
                        modifier = Modifier.size(24.dp))
                } else if (showIcon) {
                    Image(
                        painter = painterResource(id = R.drawable.button_grey),
                        contentDescription = "Add",
                        modifier = Modifier.size(24.dp))
                }
            }
        }
    }
}

@Composable
private fun ContinueButton() {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .padding(20.dp)
    ) {
        Button(
            onClick = { /* Handle continue */ },
            modifier = Modifier
                .fillMaxWidth()
                .height(52.dp),
            shape = RoundedCornerShape(20.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = Color(0xFF149459),
                contentColor = Color.White
            )
        ) {
            Text(
                text = "Continue",
                fontSize = 18.sp,
                fontWeight = FontWeight.SemiBold)
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewPaymentMethod() {
    PaymentMethod()
}
